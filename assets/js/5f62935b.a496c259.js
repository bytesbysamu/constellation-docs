"use strict";(self.webpackChunkconstellation_docs=self.webpackChunkconstellation_docs||[]).push([[35],{3435:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"task3","title":"\ud83e\udd16 AI & Embeddings Foundation","description":"Current State","source":"@site/docs/task3.md","sourceDirName":".","slug":"/task3","permalink":"/task3","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15},"sidebar":"tutorialSidebar","previous":{"title":"\ud83c\udfaf Frontend Integration & Mobile Development","permalink":"/task2"}}');var r=i(4848),t=i(8453);const l={sidebar_position:15},a="\ud83e\udd16 AI & Embeddings Foundation",c={},o=[{value:"Current State",id:"current-state",level:2},{value:"Done",id:"done",level:3},{value:"Missing",id:"missing",level:3},{value:"Critical Path",id:"critical-path",level:2},{value:"1. Ollama Integration",id:"1-ollama-integration",level:3},{value:"2. pgvector Setup",id:"2-pgvector-setup",level:3},{value:"3. AI Service Layer",id:"3-ai-service-layer",level:3},{value:"Execution Plan",id:"execution-plan",level:2},{value:"Required Config",id:"required-config",level:2},{value:"Backend",id:"backend",level:3},{value:"Infrastructure",id:"infrastructure",level:3},{value:"Success Criteria",id:"success-criteria",level:2},{value:"Testing Checklist",id:"testing-checklist",level:2},{value:"AI Generation",id:"ai-generation",level:3},{value:"Vector Operations",id:"vector-operations",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Backend Changes",id:"backend-changes",level:3},{value:"Database Changes",id:"database-changes",level:3},{value:"Next Phase: CBT-Buddy Domain Logic",id:"next-phase-cbt-buddy-domain-logic",level:2},{value:"Code Exploration Findings",id:"code-exploration-findings",level:2},{value:"Current Backend Architecture",id:"current-backend-architecture",level:3},{value:"AI Implementation Plan - Detailed Structure",id:"ai-implementation-plan---detailed-structure",level:3},{value:"<strong>Files to Add (Complete New Structure)</strong>",id:"files-to-add-complete-new-structure",level:4},{value:"<strong>1. AI Service Layer - NEW DIRECTORY</strong>",id:"1-ai-service-layer---new-directory",level:5},{value:"<strong>2. Vector Storage Layer - NEW DIRECTORY</strong>",id:"2-vector-storage-layer---new-directory",level:5},{value:"<strong>3. Configuration &amp; Controllers - NEW DIRECTORY</strong>",id:"3-configuration--controllers---new-directory",level:5},{value:"<strong>4. Database Migrations</strong>",id:"4-database-migrations",level:5},{value:"<strong>Files to Modify</strong>",id:"files-to-modify",level:4},{value:"<strong>1. Dependencies</strong>",id:"1-dependencies",level:5},{value:"<strong>2. Configuration</strong>",id:"2-configuration",level:5},{value:"<strong>3. Existing Structure</strong>",id:"3-existing-structure",level:5},{value:"<strong>High-Level Architecture Changes</strong>",id:"high-level-architecture-changes",level:3},{value:"<strong>1. Database Layer</strong>",id:"1-database-layer",level:4},{value:"<strong>2. Service Layer - COMPLETELY NEW</strong>",id:"2-service-layer---completely-new",level:4},{value:"<strong>3. API Layer - COMPLETELY NEW</strong>",id:"3-api-layer---completely-new",level:4},{value:"<strong>4. Infrastructure</strong>",id:"4-infrastructure",level:4},{value:"<strong>Key Design Decisions</strong>",id:"key-design-decisions",level:3},{value:"<strong>Implementation Phases</strong>",id:"implementation-phases",level:3},{value:"<strong>Phase 1: Foundation (Week 1)</strong>",id:"phase-1-foundation-week-1",level:4},{value:"<strong>Phase 2: Vector Storage (Week 2)</strong>",id:"phase-2-vector-storage-week-2",level:4},{value:"<strong>Phase 3: AI Services (Week 3)</strong>",id:"phase-3-ai-services-week-3",level:4},{value:"<strong>Phase 4: Integration &amp; Testing (Week 4)</strong>",id:"phase-4-integration--testing-week-4",level:4},{value:"<strong>Current Codebase Advantages</strong>",id:"current-codebase-advantages",level:3},{value:"<strong>Implementation Strategy: Ollama \u2192 Service \u2192 pgvector</strong>",id:"implementation-strategy-ollama--service--pgvector",level:2},{value:"<strong>Phase 1: Ollama Integration</strong>",id:"phase-1-ollama-integration",level:3},{value:"<strong>Infrastructure Approach</strong>",id:"infrastructure-approach",level:4},{value:"<strong>Backend Integration Strategy</strong>",id:"backend-integration-strategy",level:4},{value:"<strong>Communication Strategy</strong>",id:"communication-strategy",level:4},{value:"<strong>Phase 2: AI Service Layer</strong>",id:"phase-2-ai-service-layer",level:3},{value:"<strong>Service Architecture Strategy</strong>",id:"service-architecture-strategy",level:4},{value:"<strong>API Design Strategy</strong>",id:"api-design-strategy",level:4},{value:"<strong>Integration Strategy</strong>",id:"integration-strategy",level:4},{value:"<strong>Phase 3: pgvector Setup</strong>",id:"phase-3-pgvector-setup",level:3},{value:"<strong>Database Strategy</strong>",id:"database-strategy",level:4},{value:"<strong>Vector Operations Strategy</strong>",id:"vector-operations-strategy",level:4},{value:"<strong>Overall Implementation Philosophy</strong>",id:"overall-implementation-philosophy",level:3},{value:"<strong>Pattern Consistency</strong>",id:"pattern-consistency",level:4},{value:"<strong>Integration Strategy</strong>",id:"integration-strategy-1",level:4},{value:"<strong>Testing Approach</strong>",id:"testing-approach",level:4},{value:"<strong>Implementation Order Rationale</strong>",id:"implementation-order-rationale",level:3},{value:"<strong>Why Ollama First?</strong>",id:"why-ollama-first",level:4},{value:"<strong>Why Service Layer Second?</strong>",id:"why-service-layer-second",level:4},{value:"<strong>Why pgvector Last?</strong>",id:"why-pgvector-last",level:4},{value:"<strong>Phase 1: Ollama Integration with LangChain4j - Detailed Implementation Plan</strong>",id:"phase-1-ollama-integration-with-langchain4j---detailed-implementation-plan",level:2},{value:"<strong>Day 1: Infrastructure Foundation</strong>",id:"day-1-infrastructure-foundation",level:3},{value:"<strong>1.1 Docker Compose Updates</strong>",id:"11-docker-compose-updates",level:4},{value:"<strong>1.2 Environment Configuration</strong>",id:"12-environment-configuration",level:4},{value:"<strong>1.3 Infrastructure Testing</strong>",id:"13-infrastructure-testing",level:4},{value:"<strong>Day 2: LangChain4j Dependencies &amp; Structure</strong>",id:"day-2-langchain4j-dependencies--structure",level:3},{value:"<strong>2.1 Dependencies Update</strong>",id:"21-dependencies-update",level:4},{value:"<strong>2.2 Package Structure Creation</strong>",id:"22-package-structure-creation",level:4},{value:"<strong>2.3 LangChain4j Configuration Foundation</strong>",id:"23-langchain4j-configuration-foundation",level:4},{value:"<strong>Day 3: Core LangChain4j Integration</strong>",id:"day-3-core-langchain4j-integration",level:3},{value:"<strong>3.1 Chat Model Configuration</strong>",id:"31-chat-model-configuration",level:4},{value:"<strong>3.2 Embedding Model Configuration</strong>",id:"32-embedding-model-configuration",level:4},{value:"<strong>3.3 Prompt Template Management</strong>",id:"33-prompt-template-management",level:4},{value:"<strong>Day 4: Service Layer with LangChain4j</strong>",id:"day-4-service-layer-with-langchain4j",level:3},{value:"<strong>4.1 AI Service Interface</strong>",id:"41-ai-service-interface",level:4},{value:"<strong>4.2 AI Service Implementation</strong>",id:"42-ai-service-implementation",level:4},{value:"<strong>4.3 Advanced AI Features</strong>",id:"43-advanced-ai-features",level:4},{value:"<strong>Day 5: LangChain4j Advanced Features</strong>",id:"day-5-langchain4j-advanced-features",level:3},{value:"<strong>5.1 Tool Integration</strong>",id:"51-tool-integration",level:4},{value:"<strong>5.2 Agent Framework</strong>",id:"52-agent-framework",level:4},{value:"<strong>5.3 RAG (Retrieval Augmented Generation)</strong>",id:"53-rag-retrieval-augmented-generation",level:4},{value:"<strong>Day 6: Integration &amp; Testing</strong>",id:"day-6-integration--testing",level:3},{value:"<strong>6.1 Component Registration</strong>",id:"61-component-registration",level:4},{value:"<strong>6.2 Health Check Integration</strong>",id:"62-health-check-integration",level:4},{value:"<strong>6.3 Testing Strategy</strong>",id:"63-testing-strategy",level:4},{value:"<strong>Day 7: Validation &amp; Optimization</strong>",id:"day-7-validation--optimization",level:3},{value:"<strong>7.1 Performance Optimization</strong>",id:"71-performance-optimization",level:4},{value:"<strong>7.2 Error Handling &amp; Fallbacks</strong>",id:"72-error-handling--fallbacks",level:4},{value:"<strong>7.3 Monitoring &amp; Observability</strong>",id:"73-monitoring--observability",level:4},{value:"<strong>Success Criteria for Phase 1 with LangChain4j</strong>",id:"success-criteria-for-phase-1-with-langchain4j",level:3},{value:"<strong>Infrastructure</strong>",id:"infrastructure-1",level:4},{value:"<strong>Core Functionality</strong>",id:"core-functionality",level:4},{value:"<strong>Advanced Features</strong>",id:"advanced-features",level:4},{value:"<strong>Integration</strong>",id:"integration",level:4},{value:"<strong>Key Benefits of LangChain4j Approach</strong>",id:"key-benefits-of-langchain4j-approach",level:3},{value:"\ud83c\udfaf <strong>Day 3: Core LangChain4j Integration - COMPLETED SUCCESSFULLY! \u2705</strong>",id:"-day-3-core-langchain4j-integration---completed-successfully-",level:2},{value:"<strong>Summary</strong>: Service implementation, comprehensive testing, and architecture decisions completed",id:"summary-service-implementation-comprehensive-testing-and-architecture-decisions-completed",level:3},{value:"<strong>\u2705 Achievements</strong>",id:"-achievements",level:4},{value:"<strong>\ud83d\udd27 Technical Details</strong>",id:"-technical-details",level:4},{value:"<strong>\ud83d\udcca Test Results</strong>",id:"-test-results",level:4},{value:"<strong>\ud83c\udfaf Key Decisions</strong>",id:"-key-decisions",level:4},{value:"<strong>\ud83d\ude80 Next Steps</strong>",id:"-next-steps",level:4},{value:"<strong>\ud83d\udca1 Lessons</strong>",id:"-lessons",level:4}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-ai--embeddings-foundation",children:"\ud83e\udd16 AI & Embeddings Foundation"})}),"\n",(0,r.jsx)(n.h2,{id:"current-state",children:"Current State"}),"\n",(0,r.jsx)(n.h3,{id:"done",children:"Done"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"RevenueCat mobile IAP integration"}),"\n",(0,r.jsx)(n.li,{children:"Stripe web payments + unified subscription system"}),"\n",(0,r.jsx)(n.li,{children:"Auth, email, CI/CD, SQLite, i18n baseline"}),"\n",(0,r.jsx)(n.li,{children:"Complete payment foundation (web + mobile)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"missing",children:"Missing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ollama integration for local AI inference"}),"\n",(0,r.jsx)(n.li,{children:"pgvector for vector storage and similarity search"}),"\n",(0,r.jsx)(n.li,{children:"Business-agnostic AI service layer"}),"\n",(0,r.jsx)(n.li,{children:"Embedding generation and storage pipeline"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"critical-path",children:"Critical Path"}),"\n",(0,r.jsx)(n.h3,{id:"1-ollama-integration",children:"1. Ollama Integration"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add Ollama client to backend"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Create AI service for text generation"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test local model inference (Llama2, Mistral)"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Implement fallback to cloud AI if needed"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-pgvector-setup",children:"2. pgvector Setup"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add pgvector extension to PostgreSQL"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Create embedding storage tables"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add vector similarity search endpoints"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test embedding storage and retrieval"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-ai-service-layer",children:"3. AI Service Layer"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Create business-agnostic AI service"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Implement embedding generation pipeline"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add text-to-vector conversion"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Build similarity search API"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"execution-plan",children:"Execution Plan"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Week 1"})," \u2013 Ollama integration + local AI testing",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Week 2"})," \u2013 pgvector setup + embedding storage",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Week 3"})," \u2013 AI service layer + similarity search",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Week 4"})," \u2013 Testing + fork repos for CBT-Buddy"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"required-config",children:"Required Config"}),"\n",(0,r.jsx)(n.h3,{id:"backend",children:"Backend"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"OLLAMA_BASE_URL=http://localhost:11434\nOLLAMA_MODEL=llama2:7b\nPOSTGRES_VECTOR_EXTENSION=pgvector\nEMBEDDING_MODEL=text-embedding-ada-002\n"})}),"\n",(0,r.jsx)(n.h3,{id:"infrastructure",children:"Infrastructure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"PostgreSQL 15+ with pgvector extension\nOllama running locally with models\nVector storage tables for embeddings\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"success-criteria",children:"Success Criteria"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Ollama generates text locally without cloud dependency"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","pgvector stores and retrieves embeddings efficiently"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","AI service handles text generation and embedding"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Similarity search returns relevant results"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Ready to fork repos and start CBT-Buddy domain logic"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"testing-checklist",children:"Testing Checklist"}),"\n",(0,r.jsx)(n.h3,{id:"ai-generation",children:"AI Generation"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Ollama generates coherent text responses"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Fallback to cloud AI works if local fails"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","AI service handles different model types"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"vector-operations",children:"Vector Operations"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Embeddings generate and store correctly"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Similarity search finds relevant content"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Vector operations perform within acceptable latency"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,r.jsx)(n.h3,{id:"backend-changes",children:"Backend Changes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add Ollama client dependency"}),"\n",(0,r.jsx)(n.li,{children:"Create AI service with model abstraction"}),"\n",(0,r.jsx)(n.li,{children:"Add pgvector tables for embeddings"}),"\n",(0,r.jsx)(n.li,{children:"Implement vector similarity search"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"database-changes",children:"Database Changes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enable pgvector extension"}),"\n",(0,r.jsx)(n.li,{children:"Create embeddings table with vector column"}),"\n",(0,r.jsx)(n.li,{children:"Add indexes for similarity search performance"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"next-phase-cbt-buddy-domain-logic",children:"Next Phase: CBT-Buddy Domain Logic"}),"\n",(0,r.jsx)(n.p,{children:"Once AI foundation is complete:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fork repos"})," for CBT-Buddy development"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Implement CBT-specific AI prompts"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Build therapy worksheet generation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Create progress tracking with embeddings"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Deploy domain-specific AI features"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status"}),": 8/8 foundation complete (100%)",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Focus"}),": AI + embeddings foundation",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Timeline"}),": 4 weeks",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Risk"}),": Low (building on solid foundation)"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"code-exploration-findings",children:"Code Exploration Findings"}),"\n",(0,r.jsx)(n.h3,{id:"current-backend-architecture",children:"Current Backend Architecture"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring Boot 3.2.12"})," with Java 21"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PostgreSQL 15.1"})," via Docker Compose"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"JPA/Hibernate"})," with Flyway migrations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Existing modules"}),": ",(0,r.jsx)(n.code,{children:"common/"}),", ",(0,r.jsx)(n.code,{children:"user/"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Current database"}),": Users, roles, auth tokens (V1, V2 migrations)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"ai-implementation-plan---detailed-structure",children:"AI Implementation Plan - Detailed Structure"}),"\n",(0,r.jsx)(n.h4,{id:"files-to-add-complete-new-structure",children:(0,r.jsx)(n.strong,{children:"Files to Add (Complete New Structure)"})}),"\n",(0,r.jsx)(n.h5,{id:"1-ai-service-layer---new-directory",children:(0,r.jsx)(n.strong,{children:"1. AI Service Layer - NEW DIRECTORY"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/service/AiService.java"})," - Main AI service interface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/service/AiServiceImpl.java"})," - Implementation with Ollama integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/service/EmbeddingService.java"})," - Embedding generation service"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/service/EmbeddingServiceImpl.java"})," - Implementation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/client/OllamaClient.java"})," - HTTP client for Ollama"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/client/CloudAiClient.java"})," - Fallback cloud AI client"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/model/AiRequest.java"})," - AI request DTOs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/model/AiResponse.java"})," - AI response DTOs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/model/EmbeddingRequest.java"})," - Embedding request DTOs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/model/EmbeddingResponse.java"})," - Embedding response DTOs"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"2-vector-storage-layer---new-directory",children:(0,r.jsx)(n.strong,{children:"2. Vector Storage Layer - NEW DIRECTORY"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/domain/Embedding.java"})," - JPA entity for embeddings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/domain/EmbeddingRepository.java"})," - Repository interface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/domain/VectorSearchResult.java"})," - Search result DTO"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/service/VectorSearchService.java"})," - Vector similarity search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/service/VectorSearchServiceImpl.java"})," - Implementation"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"3-configuration--controllers---new-directory",children:(0,r.jsx)(n.strong,{children:"3. Configuration & Controllers - NEW DIRECTORY"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/config/AiConfiguration.java"})," - AI service configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/controller/AiController.java"})," - REST endpoints for AI operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/ai/controller/EmbeddingController.java"})," - Embedding endpoints"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"4-database-migrations",children:(0,r.jsx)(n.strong,{children:"4. Database Migrations"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"V3__add_pgvector_extension.sql"})," - Enable pgvector extension"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"V4__create_embeddings_table.sql"})," - Create embeddings table with vector column"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"files-to-modify",children:(0,r.jsx)(n.strong,{children:"Files to Modify"})}),"\n",(0,r.jsx)(n.h5,{id:"1-dependencies",children:(0,r.jsx)(n.strong,{children:"1. Dependencies"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"build.gradle"})," - Add Ollama client, pgvector dependencies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"docker-compose.yml"})," - Add Ollama service, update PostgreSQL with pgvector"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"2-configuration",children:(0,r.jsx)(n.strong,{children:"2. Configuration"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"application.yml"})," - Add AI service configuration properties"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".env.example"})," - Add AI-related environment variables"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"3-existing-structure",children:(0,r.jsx)(n.strong,{children:"3. Existing Structure"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SpringularApplication.java"})," - Add AI service component scanning"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"common/config/"})," - Add AI configuration beans"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"high-level-architecture-changes",children:(0,r.jsx)(n.strong,{children:"High-Level Architecture Changes"})}),"\n",(0,r.jsx)(n.h4,{id:"1-database-layer",children:(0,r.jsx)(n.strong,{children:"1. Database Layer"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enable pgvector extension in PostgreSQL"}),"\n",(0,r.jsx)(n.li,{children:"Create embeddings table with vector column type"}),"\n",(0,r.jsx)(n.li,{children:"Add vector similarity search indexes"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-service-layer---completely-new",children:(0,r.jsx)(n.strong,{children:"2. Service Layer - COMPLETELY NEW"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Abstract AI service interface supporting multiple providers"}),"\n",(0,r.jsx)(n.li,{children:"Ollama integration for local inference"}),"\n",(0,r.jsx)(n.li,{children:"Cloud AI fallback mechanism"}),"\n",(0,r.jsx)(n.li,{children:"Embedding generation pipeline"}),"\n",(0,r.jsx)(n.li,{children:"Vector similarity search implementation"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"3-api-layer---completely-new",children:(0,r.jsx)(n.strong,{children:"3. API Layer - COMPLETELY NEW"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"REST endpoints for text generation"}),"\n",(0,r.jsx)(n.li,{children:"REST endpoints for embedding generation"}),"\n",(0,r.jsx)(n.li,{children:"Vector similarity search API"}),"\n",(0,r.jsx)(n.li,{children:"Health check endpoints for AI services"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"4-infrastructure",children:(0,r.jsx)(n.strong,{children:"4. Infrastructure"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add Ollama container to Docker Compose"}),"\n",(0,r.jsx)(n.li,{children:"Update PostgreSQL container to include pgvector"}),"\n",(0,r.jsx)(n.li,{children:"Environment variable configuration for AI services"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"key-design-decisions",children:(0,r.jsx)(n.strong,{children:"Key Design Decisions"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complete New Module"}),": Building AI capabilities from scratch as a new module"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service Abstraction"}),": Business-agnostic AI service layer that can be extended for CBT-Buddy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provider Flexibility"}),": Support for both local (Ollama) and cloud AI providers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vector Storage"}),": PostgreSQL + pgvector for efficient similarity search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fallback Strategy"}),": Local AI first, cloud AI as backup"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scalability"}),": Design for future domain-specific AI features"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"implementation-phases",children:(0,r.jsx)(n.strong,{children:"Implementation Phases"})}),"\n",(0,r.jsx)(n.h4,{id:"phase-1-foundation-week-1",children:(0,r.jsx)(n.strong,{children:"Phase 1: Foundation (Week 1)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Create entire ",(0,r.jsx)(n.code,{children:"common/ai/"})," directory structure"]}),"\n",(0,r.jsx)(n.li,{children:"Add dependencies and configuration"}),"\n",(0,r.jsx)(n.li,{children:"Implement Ollama client"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"phase-2-vector-storage-week-2",children:(0,r.jsx)(n.strong,{children:"Phase 2: Vector Storage (Week 2)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Database migrations for pgvector"}),"\n",(0,r.jsx)(n.li,{children:"Embedding entity and repository"}),"\n",(0,r.jsx)(n.li,{children:"Basic vector operations"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"phase-3-ai-services-week-3",children:(0,r.jsx)(n.strong,{children:"Phase 3: AI Services (Week 3)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Text generation service"}),"\n",(0,r.jsx)(n.li,{children:"Embedding generation service"}),"\n",(0,r.jsx)(n.li,{children:"Vector similarity search"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"phase-4-integration--testing-week-4",children:(0,r.jsx)(n.strong,{children:"Phase 4: Integration & Testing (Week 4)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"REST controllers"}),"\n",(0,r.jsx)(n.li,{children:"Service integration"}),"\n",(0,r.jsx)(n.li,{children:"Testing and validation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"current-codebase-advantages",children:(0,r.jsx)(n.strong,{children:"Current Codebase Advantages"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Clean Spring Boot architecture with proper separation of concerns"}),"\n",(0,r.jsx)(n.li,{children:"Existing user authentication and payment systems provide solid foundation"}),"\n",(0,r.jsx)(n.li,{children:"Docker Compose setup makes infrastructure changes straightforward"}),"\n",(0,r.jsx)(n.li,{children:"Flyway migrations ensure database schema versioning"}),"\n",(0,r.jsx)(n.li,{children:"JPA/Hibernate patterns already established for new entities"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"implementation-strategy-ollama--service--pgvector",children:(0,r.jsx)(n.strong,{children:"Implementation Strategy: Ollama \u2192 Service \u2192 pgvector"})}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-ollama-integration",children:(0,r.jsx)(n.strong,{children:"Phase 1: Ollama Integration"})}),"\n",(0,r.jsx)(n.h4,{id:"infrastructure-approach",children:(0,r.jsx)(n.strong,{children:"Infrastructure Approach"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Docker Strategy"}),": Add Ollama as a new service in the existing docker-compose.yml, using the official ollama/ollama image"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Networking"}),": Leverage the existing constellation-network to allow the Spring Boot backend to communicate with Ollama"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Environment Management"}),": Add Ollama-specific variables to the existing .env pattern, following the same structure as Stripe and other services"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"backend-integration-strategy",children:(0,r.jsx)(n.strong,{children:"Backend Integration Strategy"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dependency Management"}),": Extend the existing build.gradle with HTTP client dependencies, following the same pattern as Stripe integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Package Structure"}),": Create the AI package under common/ following the existing module pattern (like common/stripe, common/revenuecat)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client Pattern"}),": Implement OllamaClient similar to how other external service clients are structured in the codebase"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"communication-strategy",children:(0,r.jsx)(n.strong,{children:"Communication Strategy"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTP Client"}),": Use Spring's WebClient (already in the stack) to communicate with Ollama's REST API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Follow the existing exception handling patterns used in UserService and other services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration"}),": Use the existing configuration pattern with @ConfigurationProperties for Ollama settings"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-ai-service-layer",children:(0,r.jsx)(n.strong,{children:"Phase 2: AI Service Layer"})}),"\n",(0,r.jsx)(n.h4,{id:"service-architecture-strategy",children:(0,r.jsx)(n.strong,{children:"Service Architecture Strategy"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Interface Pattern"}),": Follow the existing service pattern (like UserService interface + UserServiceImpl)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dependency Injection"}),": Use the existing Spring Boot patterns for service registration and injection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Exception Handling"}),": Extend the existing exception hierarchy for AI-specific errors"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"api-design-strategy",children:(0,r.jsx)(n.strong,{children:"API Design Strategy"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Controller Pattern"}),": Follow the existing UserController pattern with proper request/response DTOs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Use the existing validation patterns with @Valid annotations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security"}),": Integrate with the existing JWT authentication system"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"integration-strategy",children:(0,r.jsx)(n.strong,{children:"Integration Strategy"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Component Scanning"}),": Extend the existing SpringularApplication to include the AI package"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Health Checks"}),": Add AI service health to the existing actuator health endpoint"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logging"}),": Use the existing logback configuration and logging patterns"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-pgvector-setup",children:(0,r.jsx)(n.strong,{children:"Phase 3: pgvector Setup"})}),"\n",(0,r.jsx)(n.h4,{id:"database-strategy",children:(0,r.jsx)(n.strong,{children:"Database Strategy"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Migration Pattern"}),": Follow the existing Flyway migration pattern (V1, V2) with V3 for pgvector extension and V4 for embeddings table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entity Pattern"}),": Create Embedding entity following the existing User entity pattern with JPA annotations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repository Pattern"}),": Extend the existing repository pattern with JpaRepository"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"vector-operations-strategy",children:(0,r.jsx)(n.strong,{children:"Vector Operations Strategy"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service Layer"}),": Create VectorSearchService following the existing service pattern"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": Use the existing database connection pooling and add vector-specific indexes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration"}),": Wire vector operations into the existing AI service layer"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"overall-implementation-philosophy",children:(0,r.jsx)(n.strong,{children:"Overall Implementation Philosophy"})}),"\n",(0,r.jsx)(n.h4,{id:"pattern-consistency",children:(0,r.jsx)(n.strong,{children:"Pattern Consistency"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Follow Existing"}),": Every new component should mirror the existing patterns in the codebase"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extend Don't Replace"}),": Build on top of existing infrastructure rather than creating parallel systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration First"}),": Use the existing configuration patterns for all new services"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"integration-strategy-1",children:(0,r.jsx)(n.strong,{children:"Integration Strategy"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Gradual Addition"}),": Add each component incrementally, testing integration at each step"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Existing Infrastructure"}),": Leverage the current Docker setup, database connections, and Spring Boot configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Extend the existing exception and error handling patterns"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"testing-approach",children:(0,r.jsx)(n.strong,{children:"Testing Approach"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Component Testing"}),": Test each new component in isolation first"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration Testing"}),": Test with existing services using the existing test patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"End-to-End"}),": Validate the complete flow using the existing health check and monitoring patterns"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"implementation-order-rationale",children:(0,r.jsx)(n.strong,{children:"Implementation Order Rationale"})}),"\n",(0,r.jsx)(n.h4,{id:"why-ollama-first",children:(0,r.jsx)(n.strong,{children:"Why Ollama First?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Immediate Validation"}),": Get AI working locally before database complexity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Foundation Testing"}),": Validate AI capabilities without vector storage dependencies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Experience"}),": Demonstrate AI functionality early in the development cycle"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"why-service-layer-second",children:(0,r.jsx)(n.strong,{children:"Why Service Layer Second?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Architecture Validation"}),": Ensure AI service patterns integrate properly with existing system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API Design"}),": Define interfaces before implementing storage layer"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing Strategy"}),": Test AI logic independently of vector operations"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"why-pgvector-last",children:(0,r.jsx)(n.strong,{children:"Why pgvector Last?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complexity Management"}),": Add vector capabilities once AI foundation is solid"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Optimization"}),": Focus on vector operations after basic AI functionality works"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration Testing"}),": Test complete AI + vector pipeline at the end"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This strategy ensures we're building the AI foundation as a natural extension of the existing system rather than a separate parallel implementation."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"phase-1-ollama-integration-with-langchain4j---detailed-implementation-plan",children:(0,r.jsx)(n.strong,{children:"Phase 1: Ollama Integration with LangChain4j - Detailed Implementation Plan"})}),"\n",(0,r.jsx)(n.h3,{id:"day-1-infrastructure-foundation",children:(0,r.jsx)(n.strong,{children:"Day 1: Infrastructure Foundation"})}),"\n",(0,r.jsx)(n.h4,{id:"11-docker-compose-updates",children:(0,r.jsx)(n.strong,{children:"1.1 Docker Compose Updates"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"backend/docker-compose.yml"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action"}),": Add Ollama service after the existing services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"ollama/ollama:latest"})," image"]}),"\n",(0,r.jsx)(n.li,{children:"Expose port 11434 (Ollama's default)"}),"\n",(0,r.jsx)(n.li,{children:"Add to existing constellation-network"}),"\n",(0,r.jsx)(n.li,{children:"Mount volume for model persistence"}),"\n",(0,r.jsx)(n.li,{children:"Add health check for Ollama service"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"12-environment-configuration",children:(0,r.jsx)(n.strong,{children:"1.2 Environment Configuration"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"backend/.env.example"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"New Variables"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"OLLAMA_BASE_URL=http://localhost:11434"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"OLLAMA_MODEL=llama2:7b"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"OLLAMA_TIMEOUT=30000"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"OLLAMA_MAX_TOKENS=2048"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern"}),": Follow existing Stripe/SendGrid variable structure"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"13-infrastructure-testing",children:(0,r.jsx)(n.strong,{children:"1.3 Infrastructure Testing"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action"}),": Start Docker services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ollama container starts successfully"}),"\n",(0,r.jsx)(n.li,{children:"Backend can reach Ollama on port 11434"}),"\n",(0,r.jsx)(n.li,{children:"Network connectivity between services works"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"day-2-langchain4j-dependencies--structure",children:(0,r.jsx)(n.strong,{children:"Day 2: LangChain4j Dependencies & Structure"})}),"\n",(0,r.jsx)(n.h4,{id:"21-dependencies-update",children:(0,r.jsx)(n.strong,{children:"2.1 Dependencies Update"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"backend/server/build.gradle"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Additions"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"langchain4j-ollama"})," - Core Ollama integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"langchain4j-core"})," - Core LangChain4j functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"langchain4j-spring-boot-starter"})," - Spring Boot integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"langchain4j-embeddings-all-minilm-l6-v2"})," - Default embedding model"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern"}),": Follow existing dependency structure"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"22-package-structure-creation",children:(0,r.jsx)(n.strong,{children:"2.2 Package Structure Creation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Directory"}),": ",(0,r.jsx)(n.code,{children:"backend/server/src/main/java/com/saas/springular/common/ai/"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Subdirectories"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config/"})," - LangChain4j configuration beans"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"model/"})," - DTOs and request/response objects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"service/"})," - Business logic services using LangChain4j"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prompt/"})," - Prompt templates and management"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"23-langchain4j-configuration-foundation",children:(0,r.jsx)(n.strong,{children:"2.3 LangChain4j Configuration Foundation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"common/ai/config/LangChain4jConfiguration.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Configure LangChain4j beans and Ollama integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Beans"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"OllamaChatModel"})," - Text generation model"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EmbeddingModel"})," - Text embedding model"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ChatMemoryStore"})," - Conversation memory"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PromptTemplate"})," - Reusable prompt templates"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"day-3-core-langchain4j-integration",children:(0,r.jsx)(n.strong,{children:"Day 3: Core LangChain4j Integration"})}),"\n",(0,r.jsx)(n.h4,{id:"31-chat-model-configuration",children:(0,r.jsx)(n.strong,{children:"3.1 Chat Model Configuration"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"common/ai/config/OllamaChatModelConfig.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Configure Ollama chat model with LangChain4j"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model name and parameters"}),"\n",(0,r.jsx)(n.li,{children:"Temperature and sampling settings"}),"\n",(0,r.jsx)(n.li,{children:"Timeout and retry settings"}),"\n",(0,r.jsx)(n.li,{children:"Fallback configuration"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"32-embedding-model-configuration",children:(0,r.jsx)(n.strong,{children:"3.2 Embedding Model Configuration"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"common/ai/config/EmbeddingModelConfig.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Configure embedding model for vector operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Options"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use Ollama embeddings if available"}),"\n",(0,r.jsx)(n.li,{children:"Fallback to local embedding model"}),"\n",(0,r.jsx)(n.li,{children:"Embedding dimension configuration"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"33-prompt-template-management",children:(0,r.jsx)(n.strong,{children:"3.3 Prompt Template Management"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"common/ai/prompt/PromptTemplateManager.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Manage reusable prompt templates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Features"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Template loading from resources"}),"\n",(0,r.jsx)(n.li,{children:"Variable substitution"}),"\n",(0,r.jsx)(n.li,{children:"Template versioning"}),"\n",(0,r.jsx)(n.li,{children:"Domain-specific prompt collections"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"day-4-service-layer-with-langchain4j",children:(0,r.jsx)(n.strong,{children:"Day 4: Service Layer with LangChain4j"})}),"\n",(0,r.jsx)(n.h4,{id:"41-ai-service-interface",children:(0,r.jsx)(n.strong,{children:"4.1 AI Service Interface"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"common/ai/service/AiService.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Business logic abstraction for AI operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Methods"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"generateText(String prompt, AiGenerationOptions options)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"generateTextWithMemory(String prompt, String sessionId)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"generateEmbeddings(String text)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"getAvailableModels()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"healthCheck()"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"42-ai-service-implementation",children:(0,r.jsx)(n.strong,{children:"4.2 AI Service Implementation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"common/ai/service/AiServiceImpl.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dependencies"}),": Inject LangChain4j models and services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"LangChain4j Integration"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"OllamaChatModel"})," for text generation"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"EmbeddingModel"})," for embeddings"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"ChatMemoryStore"})," for conversation context"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"PromptTemplate"})," for structured prompts"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"43-advanced-ai-features",children:(0,r.jsx)(n.strong,{children:"4.3 Advanced AI Features"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Conversation Memory"}),": Maintain chat context across requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prompt Chaining"}),": Chain multiple prompts for complex tasks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response Streaming"}),": Support for streaming responses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Model Switching"}),": Switch between different Ollama models"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"day-5-langchain4j-advanced-features",children:(0,r.jsx)(n.strong,{children:"Day 5: LangChain4j Advanced Features"})}),"\n",(0,r.jsx)(n.h4,{id:"51-tool-integration",children:(0,r.jsx)(n.strong,{children:"5.1 Tool Integration"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"common/ai/tool/"})," (new directory)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Define custom tools for LangChain4j"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tools"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DatabaseQueryTool"})," - Query database information"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FileReadTool"})," - Read file contents"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WebSearchTool"})," - Search web for information"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"CalculatorTool"})," - Mathematical operations"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"52-agent-framework",children:(0,r.jsx)(n.strong,{children:"5.2 Agent Framework"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"common/ai/agent/AiAgent.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Create AI agents using LangChain4j"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Features"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tool selection and execution"}),"\n",(0,r.jsx)(n.li,{children:"Reasoning and planning"}),"\n",(0,r.jsx)(n.li,{children:"Multi-step task execution"}),"\n",(0,r.jsx)(n.li,{children:"Error recovery and fallbacks"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"53-rag-retrieval-augmented-generation",children:(0,r.jsx)(n.strong,{children:"5.3 RAG (Retrieval Augmented Generation)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"common/ai/rag/RagService.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Implement RAG capabilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Components"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Document ingestion and chunking"}),"\n",(0,r.jsx)(n.li,{children:"Vector similarity search"}),"\n",(0,r.jsx)(n.li,{children:"Context-aware text generation"}),"\n",(0,r.jsx)(n.li,{children:"Source attribution"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"day-6-integration--testing",children:(0,r.jsx)(n.strong,{children:"Day 6: Integration & Testing"})}),"\n",(0,r.jsx)(n.h4,{id:"61-component-registration",children:(0,r.jsx)(n.strong,{children:"6.1 Component Registration"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"SpringularApplication.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action"}),": Add component scanning for AI package"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern"}),": Follow existing package scanning structure"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"62-health-check-integration",children:(0,r.jsx)(n.strong,{children:"6.2 Health Check Integration"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"common/ai/service/AiHealthIndicator.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Integrate with Spring Boot Actuator health endpoint"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Checks"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ollama connectivity"}),"\n",(0,r.jsx)(n.li,{children:"LangChain4j model availability"}),"\n",(0,r.jsx)(n.li,{children:"Tool and agent health"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern"}),": Follow existing health check implementations"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"63-testing-strategy",children:(0,r.jsx)(n.strong,{children:"6.3 Testing Strategy"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unit Tests"}),": Test LangChain4j integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration Tests"}),": Test AI service with real Ollama"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Agent Tests"}),": Test tool execution and reasoning"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RAG Tests"}),": Test document retrieval and generation"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"day-7-validation--optimization",children:(0,r.jsx)(n.strong,{children:"Day 7: Validation & Optimization"})}),"\n",(0,r.jsx)(n.h4,{id:"71-performance-optimization",children:(0,r.jsx)(n.strong,{children:"7.1 Performance Optimization"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Model Loading"}),": Optimize model loading and caching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Management"}),": Configure conversation memory limits"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response Time"}),": Optimize prompt processing and generation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Usage"}),": Monitor CPU and memory consumption"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"72-error-handling--fallbacks",children:(0,r.jsx)(n.strong,{children:"7.2 Error Handling & Fallbacks"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Model Failures"}),": Handle Ollama model crashes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network Issues"}),": Handle connectivity problems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tool Failures"}),": Graceful degradation when tools fail"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Issues"}),": Handle conversation memory overflow"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"73-monitoring--observability",children:(0,r.jsx)(n.strong,{children:"7.3 Monitoring & Observability"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Metrics"}),": Track request/response times, success rates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logging"}),": Structured logging for AI operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tracing"}),": Trace request flow through LangChain4j"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Alerts"}),": Monitor for AI service degradation"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"success-criteria-for-phase-1-with-langchain4j",children:(0,r.jsx)(n.strong,{children:"Success Criteria for Phase 1 with LangChain4j"})}),"\n",(0,r.jsx)(n.h4,{id:"infrastructure-1",children:(0,r.jsx)(n.strong,{children:"Infrastructure"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Ollama container starts and runs stably"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","LangChain4j successfully connects to Ollama"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All required dependencies are properly configured"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"core-functionality",children:(0,r.jsx)(n.strong,{children:"Core Functionality"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Text generation works with Ollama models"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Embedding generation functions properly"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Prompt templates can be loaded and used"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Conversation memory maintains context"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"advanced-features",children:(0,r.jsx)(n.strong,{children:"Advanced Features"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Tools can be executed by AI agents"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","RAG pipeline works for document retrieval"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Multi-step reasoning functions properly"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Error handling and fallbacks work correctly"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"integration",children:(0,r.jsx)(n.strong,{children:"Integration"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","AI services integrate with existing Spring Boot architecture"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Health checks report proper status"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Configuration follows existing patterns"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Logging and monitoring work correctly"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"key-benefits-of-langchain4j-approach",children:(0,r.jsx)(n.strong,{children:"Key Benefits of LangChain4j Approach"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Production Ready"}),": LangChain4j is designed for production use"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rich Ecosystem"}),": Access to tools, agents, and RAG capabilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring Integration"}),": Native Spring Boot support"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extensibility"}),": Easy to add custom tools and agents"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Standards"}),": Follows LangChain patterns and best practices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": Optimized for Java/Spring environments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This approach gives us a much more robust and feature-rich AI foundation compared to building custom Ollama integration from scratch."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"-day-3-core-langchain4j-integration---completed-successfully-",children:["\ud83c\udfaf ",(0,r.jsx)(n.strong,{children:"Day 3: Core LangChain4j Integration - COMPLETED SUCCESSFULLY! \u2705"})]}),"\n",(0,r.jsxs)(n.h3,{id:"summary-service-implementation-comprehensive-testing-and-architecture-decisions-completed",children:[(0,r.jsx)(n.strong,{children:"Summary"}),": Service implementation, comprehensive testing, and architecture decisions completed"]}),"\n",(0,r.jsx)(n.h4,{id:"-achievements",children:(0,r.jsx)(n.strong,{children:"\u2705 Achievements"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AiServiceImpl"}),": Full LangChain4j integration with text generation, embeddings, health checks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing"}),": 13/13 tests passing, minimal mocking, real objects where possible"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Architecture"}),": DTOs directly in service, no complex mapping, custom exceptions with retryable flags"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"-technical-details",children:(0,r.jsx)(n.strong,{children:"\ud83d\udd27 Technical Details"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service Layer"}),": Clean interface with ",(0,r.jsx)(n.code,{children:"generateText()"}),", ",(0,r.jsx)(n.code,{children:"generateEmbeddings()"}),", ",(0,r.jsx)(n.code,{children:"isHealthy()"}),", ",(0,r.jsx)(n.code,{children:"getModelInfo()"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing Strategy"}),": Mock external dependencies only, use real LangChain4j objects internally"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": ",(0,r.jsx)(n.code,{children:"AiServiceException"})," with business context, error codes, and retryable flags"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"-test-results",children:(0,r.jsx)(n.strong,{children:"\ud83d\udcca Test Results"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"BUILD SUCCESSFUL in 5s\n13 tests completed, 0 failed\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Coverage"}),": Text Generation (4), Embeddings (1), Health Checks (3), Configuration (1), Utility Methods (4)"]}),"\n",(0,r.jsx)(n.h4,{id:"-key-decisions",children:(0,r.jsx)(n.strong,{children:"\ud83c\udfaf Key Decisions"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Architecture"}),": Use generated DTOs directly in service layer"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing"}),": Comprehensive testing with minimal mocking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Custom exceptions with business context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service Design"}),": Service handles DTO creation and business logic"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"-next-steps",children:(0,r.jsx)(n.strong,{children:"\ud83d\ude80 Next Steps"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Immediate"}),": Controller testing, integration testing, performance testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Phase 2"}),": pgvector integration, embedding storage, similarity search, RAG pipeline"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"-lessons",children:(0,r.jsx)(n.strong,{children:"\ud83d\udca1 Lessons"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"What Worked"}),": OpenAPI-first approach, LangChain4j integration, pragmatic testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"To Improve"}),": More granular error types, externalized configuration, early monitoring"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83c\udf89 Status: 3/7 days completed successfully! Ready for Day 4 (Service Layer with LangChain4j)"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);